"""
Copyright (c) 2017 Red Hat, Inc
All rights reserved.

This software may be modified and distributed under the terms
of the BSD license. See the LICENSE file for details.


Add arbitrary yum repo to a list of repos which should be injected into built image.

This plugin has to run _BEFORE_ the inject_yum_repo plugin, which
actually places the repo file in the build environment.
"""
#
# FIXME
#
# Mostly just a note to be aware of at the moment:
#
#   creating dist-repos can expire regular (non-dist) repos for same tag,
#   planned to be fixed in koji 1.14
#
#   https://pagure.io/koji/issue/457
#
import os
import time
import koji
from atomic_reactor.koji_util import create_koji_session
from atomic_reactor.constants import YUM_REPOS_DIR
from atomic_reactor.plugin import PreBuildPlugin
from atomic_reactor.util import render_yum_repo


class AddDistRepoPlugin(PreBuildPlugin):
    """
    Requests a dist-repo be generated by koji such that we can then add it to
    the build configuration.

    Authentication is with Kerberos unless the koji_ssl_certs
    configuration parameter is given, in which case it should be a
    path at which 'cert', 'ca', and 'serverca' are the certificates
    for SSL authentication.

    If Kerberos is used for authentication, the default principal will
    be used (from the kernel keyring) unless both koji_keytab and
    koji_principal are specified. The koji_keytab parameter is a
    keytab name like 'type:name', and so can be used to specify a key
    in a Kubernetes secret by specifying 'FILE:/path/to/key'.
    """
    key = "add_dist_repo"
    is_allowed_to_fail = False

    def __init__(self, tasker, workflow, kojihub, kojitag, rpmcerts,
                 koji_ssl_certs=None, koji_proxy_user=None,
                 koji_principal=None, koji_keytab=None):
        """
        constructor

        :param tasker: DockerTasker instance
        :param workflow: DockerBuildWorkflow instance
        :param kojihub: string, koji hub (xmlrpc)
        :param kojitag: string, koji dist-repo repoid to request
        :param rpmcerts: list, list of str, names of RPM signing certs to trust
        :param koji_ssl_certs: str, path to 'cert', 'ca', 'serverca'
        :param koji_proxy_user: str, user to log in as (requires hub config)
        :param koji_principal: str, Kerberos principal (must specify keytab)
        :param koji_keytab: str, keytab name (must specify principal)
        """

        self.kojitag = kojitag
        self.rpmcerts = rpmcerts

        self.kojihub = kojihub
        self.koji_ssl_certs = koji_ssl_certs
        self.koji_proxy_user = koji_proxy_user

        self.koji_principal = koji_principal
        self.koji_keytab = koji_keytab

        # call parent constructor
        super(AddDistRepoPlugin, self).__init__(tasker, workflow)

    def koji_login(self):
        """
        Log in to koji

        :return: koji.ClientSession instance, logged in
        """

        # krbV python library throws an error if these are unicode
        auth_info = {
            "proxyuser": self.koji_proxy_user,
            "ssl_certs_dir": self.koji_ssl_certs,
            "krb_principal": str(self.koji_principal),
            "krb_keytab": str(self.koji_keytab)
        }
        return create_koji_session(str(self.kojihub), auth_info)

    def run(self):
        """
        Run the plugin.
        """

        if ((self.koji_principal and not self.koji_keytab) or
                (self.koji_keytab and not self.koji_principal)):
            raise RuntimeError("specify both koji_principal and koji_keytab "
                               "or neither")

        try:
            session = self.koji_login()
        except Exception:
            self.log.debug(
                "Failed to initiate koji session: login failure"
            )
            raise

        task_id = session.distRepo(self.kojitag, self.rpmcerts)
        self.log.debug(
            "Requested dist-repo: Created Task: %s" % task_id
        )

        # FIXME
        #
        # There's an expected cleanup in koji 1.14 for the distRepo feature
        # which will allow for us to get the repo info in a more clean way

        # Wait for the task to finish
        while not session.taskFinished(task_id):
            time.sleep(10)

        # Extract the repoid
        distrepo_id = session.getTaskResult(task_id)[0]

        # Query the repo info
        distrepo_info = session.repoInfo(distrepo_id)

        # Quesry for the pathinfo so we can create a yum repo
        distrepo_baseurl = koji.PathInfo(
            distrepo_info['id'], distrepo_info['tag_name'] + "/$basearch"
        )

        self.log.info("distrepo baseurl = '%s'", distrepo_baseurl)

        self.workflow.repos.setdefault("yum", [])
        repo = {
            'name': "atomic-reactor-distrepo-plugin-%s" % self.kojitag,
            'baseurl': distrepo_baseurl,
            'enabled': 1,
            'gpgcheck': 0,
        }
        path = os.path.join(YUM_REPOS_DIR, self.repo_name + ".repo")
        self.log.info("yum repo of koji target: '%s'", path)
        self.workflow.files[path] = render_yum_repo(repo)

